{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar propTypes = {\n  // the height of data preview\n  previewHeight: _propTypes2.default.string.isRequired,\n  // any children you pass in\n  children: _propTypes2.default.node.isRequired,\n  // a custom class name\n  className: _propTypes2.default.string,\n  // a flag to set default state of data\n  expanded: _propTypes2.default.bool,\n  // the text to show for expand\n  expandText: _propTypes2.default.string,\n  // the text to show for collapse\n  collapseText: _propTypes2.default.string,\n  // option to set if expanded data can be collapsed\n  collapse: _propTypes2.default.bool,\n  // a flag to set ellipsis\n  ellipsis: _propTypes2.default.bool,\n  // custom text to show before expand text\n  ellipsisText: _propTypes2.default.string,\n  // called whenever the user clicks expand button\n  onExpandClick: _propTypes2.default.func,\n  // called whenever the user clicks collapse button\n  onCollapseClick: _propTypes2.default.func,\n  // called whenever the user clicks expand and collapse button\n  onClick: _propTypes2.default.func\n};\nvar defaultProps = {\n  className: \"\",\n  expanded: false,\n  expandText: \"Expand\",\n  collapseText: \"Collapse\",\n  collapse: true,\n  ellipsis: true,\n  ellipsisText: \"...\",\n  onExpandClick: null,\n  onCollapseClick: null,\n  onClick: null\n};\n\nvar ExpandCollapse = function (_React$Component) {\n  _inherits(ExpandCollapse, _React$Component);\n\n  function ExpandCollapse(props) {\n    _classCallCheck(this, ExpandCollapse);\n\n    var _this = _possibleConstructorReturn(this, (ExpandCollapse.__proto__ || Object.getPrototypeOf(ExpandCollapse)).call(this, props));\n\n    _this.state = {\n      expanded: _this.props.expanded,\n      shouldExpand: true\n    };\n    _this.handleClick = _this.handleClick.bind(_this);\n    _this.shouldDataExpand = _this.shouldDataExpand.bind(_this);\n    _this.getContentHeight = _this.getContentHeight.bind(_this);\n    _this.getButton = _this.getButton.bind(_this);\n    _this.getButtonText = _this.getButtonText.bind(_this);\n    _this.getClassName = _this.getClassName.bind(_this);\n    _this.setScrollPosition = _this.setScrollPosition.bind(_this);\n    _this.setRef = _this.setRef.bind(_this);\n    return _this;\n  }\n\n  _createClass(ExpandCollapse, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.shouldDataExpand();\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      this.setState({\n        expanded: !this.state.expanded\n      }, function () {\n        var expanded = this.state.expanded;\n        var _props = this.props,\n            onExpandClick = _props.onExpandClick,\n            onCollapseClick = _props.onCollapseClick,\n            onClick = _props.onClick;\n\n        if (onExpandClick) {\n          if (expanded) {\n            onExpandClick(event);\n          }\n        }\n\n        if (onCollapseClick) {\n          if (!expanded) {\n            onCollapseClick(event);\n          }\n        }\n\n        if (onClick) {\n          onClick(event);\n        }\n\n        this.setScrollPosition();\n      });\n    }\n  }, {\n    key: \"setScrollPosition\",\n    value: function setScrollPosition() {\n      var expanded = this.state.expanded;\n\n      if (!expanded) {\n        var contentRect = this.toggleContent.getBoundingClientRect();\n\n        if (contentRect.top < 0) {\n          var offsetTop = Math.abs(contentRect.top + (window.pageYOffset || document.documentElement.scrollTop));\n          window.scrollTo(0, offsetTop);\n        }\n      }\n    }\n  }, {\n    key: \"shouldDataExpand\",\n    value: function shouldDataExpand() {\n      var expanded = this.state.expanded;\n      var contentRect = this.toggleContent.getBoundingClientRect();\n      var contentBodyRect = this.toggleContent.querySelector(\".react-expand-collapse__body\").getBoundingClientRect();\n\n      if (contentRect.height > contentBodyRect.height && !expanded) {\n        this.setState({\n          shouldExpand: false\n        });\n      }\n    }\n  }, {\n    key: \"getContentHeight\",\n    value: function getContentHeight() {\n      var _state = this.state,\n          expanded = _state.expanded,\n          shouldExpand = _state.shouldExpand;\n      var previewHeight = this.props.previewHeight;\n\n      if (expanded || !shouldExpand) {\n        return \"auto\";\n      }\n\n      return previewHeight;\n    }\n  }, {\n    key: \"getButton\",\n    value: function getButton() {\n      var _state2 = this.state,\n          expanded = _state2.expanded,\n          shouldExpand = _state2.shouldExpand;\n      var collapse = this.props.collapse;\n\n      if (shouldExpand) {\n        if (!collapse && expanded) {\n          return \"\";\n        }\n\n        var buttonText = this.getButtonText();\n        return _react2.default.createElement(\"span\", {\n          className: \"react-expand-collapse__button\",\n          onClick: this.handleClick,\n          \"aria-label\": buttonText,\n          \"aria-expanded\": expanded,\n          role: \"button\"\n        }, buttonText);\n      }\n\n      return \"\";\n    }\n  }, {\n    key: \"getButtonText\",\n    value: function getButtonText() {\n      var expanded = this.state.expanded;\n      var _props2 = this.props,\n          expandText = _props2.expandText,\n          collapseText = _props2.collapseText,\n          ellipsis = _props2.ellipsis,\n          ellipsisText = _props2.ellipsisText;\n      var text = expanded ? collapseText : expandText;\n\n      if (ellipsis) {\n        text = !expanded ? \"\" + (ellipsisText + \" \" + text) : text;\n      }\n\n      return text;\n    }\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      var expanded = this.state.expanded;\n      var className = this.props.className;\n      var expandedClass = expanded ? \"react-expand-collapse--expanded\" : \"\";\n      var classes = [\"react-expand-collapse__content\", expandedClass].concat(className.split(\" \")).join(\" \");\n      return classes;\n    }\n  }, {\n    key: \"setRef\",\n    value: function setRef(ref) {\n      this.toggleContent = ref;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var className = this.getClassName();\n      var contentHeight = this.getContentHeight();\n      var button = this.getButton();\n      return _react2.default.createElement(\"div\", {\n        className: className,\n        ref: this.setRef,\n        style: {\n          height: contentHeight\n        }\n      }, _react2.default.createElement(\"div\", {\n        className: \"react-expand-collapse__body\"\n      }, this.props.children), button);\n    }\n  }]);\n\n  return ExpandCollapse;\n}(_react2.default.Component);\n\nExpandCollapse.propTypes = propTypes;\nExpandCollapse.defaultProps = defaultProps;\nexports.default = ExpandCollapse;","map":null,"metadata":{},"sourceType":"script"}